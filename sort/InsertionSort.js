/**
 * 思路：在要排序的一组数中，假如前n-1个数已经排好序了，将第n个数插入到前面的有序数组中。如此反复循环，知道排好。
 */

const insertSort = (arrs) => {
    for (let i = 0; i < arrs.length - 1; i++) {
        // i为比较的轮次
        for (let j = i + 1; j > 0; j--) {
            // j为每轮次比较的个数
            /**
             * 比较大小：
             * 1、如果小于的话，交换位置
             * 2、不小于的话直接终止遍历（因为前边是有序的，最后一个为数组中的最大值）
             */
            if (arrs[j] < arrs[j - 1]) {
                // 交换位置
                const temp = arrs[j];
                arrs[j] = arrs[j - 1];
                arrs[j - 1] = temp;
            } else {
                // 终止：因为前边是有序的，最后一个为数组中的最大值
                break;
            }
        }
    }
    return arrs;
}

/**
 * 步骤解析：每次多拿出一个进行跟前边的比较
 * 第一轮：[2,5] --> 比较2和5，终止，形成有序数组[2,5]
 * 第二轮：[2,5,3] --> 比较5和3，交换位置；比较2和3，终止；形成有序数组[2,3,5]
 * 第三轮：[2,3,5,6] --> 比较5和6，终止，形成有序数组[2,3,5,6]
 * 第四轮：[2,3,5,6,0] --> 比较0和6，交换位置; 比较0和5，交换位置; 比较0和3，交换位置; 比较0和2，交换位置;终止，形成有序数组;形成有序数组[0,2,3,5,6]
 * 第五轮：[0,2,3,5,6,1] --> 逐次比较，最后形成数组[0,1,2,3,5,6],结束
 */
const arrs = [2, 5, 3, 6, 0, 1]
const res = insertSort(arrs)
console.log(res);
